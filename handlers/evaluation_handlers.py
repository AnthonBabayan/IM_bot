from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from db import save_evaluation_to_db, set_pending_feedback, get_pending_feedback, clear_pending_feedback
from services.email_service import send_complaint_email
from keyboards import get_main_menu
from constants import SELECT_TYPE
import logging

logger = logging.getLogger(__name__)

async def evaluation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data.split('_')
    rating = int(data[1])
    num = int(data[2])
    user_id = query.from_user.id

    if rating == 0:
        save_evaluation_to_db(num, user_id, 0)
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è!")
        return ConversationHandler.END

    if rating in [1, 2]:
        set_pending_feedback(user_id, num)
        await query.edit_message_text("–ù–∞–º –∂–∞–ª—å, —á—Ç–æ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—Ç–∞—Ç—å –ª—É—á—à–µ.")
        return FEEDBACK
    else:
        save_evaluation_to_db(num, user_id, rating)
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É! –ú—ã —Ä–∞–¥—ã, —á—Ç–æ —Å–º–æ–≥–ª–∏ –ø–æ–º–æ—á—å.")
        return ConversationHandler.END

async def feedback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    feedback = update.message.text
    
    pending = get_pending_feedback(user_id)
    if not pending:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
        return ConversationHandler.END

    num, rating = pending
    save_evaluation_to_db(num, user_id, rating, feedback)
    clear_pending_feedback(user_id)
    
    # Send complaint email
    user_data = {
        'user_id': user_id,
        'fio': context.user_data.get('fio'),
        'location': context.user_data.get('location'),
        'email': context.user_data.get('email')
    }
    await send_complaint_email(num, feedback, user_data)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç—ë–º!")
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–ù–°-–†–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )
    return SELECT_TYPE

async def noop_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –∑–∞—è–≤–∫—É.")
    return ConversationHandler.END 