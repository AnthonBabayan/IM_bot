from telegram import Update, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import os
from keyboards import get_main_menu, get_sw_menu, get_hw_menu, get_restart_menu
from constants import SELECT_TYPE, SW_SUBMENU, HW_SUBMENU, SUMMARY, PHOTO_UPLOAD
from db import save_dialog_to_db, get_user_data_from_db
from services.email_service import send_support_email
import logging

logger = logging.getLogger(__name__)

PHOTO_DIR = 'photos'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–ù–°-–†–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )
    return SELECT_TYPE


async def type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'finish':
        await query.edit_message_text("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
        await query.edit_message_reply_markup(get_restart_menu())
        context.user_data.clear()
        return ConversationHandler.END

    if choice == 'consult':
        await query.edit_message_text("üìû +7 (499) 973 74 74 –¥–æ–±. 7016\n‚úâÔ∏è help@globse.com")
        await query.edit_message_reply_markup(get_restart_menu())
        return ConversationHandler.END

    if choice == 'soft':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º:",
            reply_markup=get_sw_menu()
        )
        context.user_data['current_state'] = SW_SUBMENU
        return SW_SUBMENU

    if choice == 'hw':
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_hw_menu()
        )
        context.user_data['current_state'] = HW_SUBMENU
        return HW_SUBMENU

async def sw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    choice = query.data

    context.user_data['type'] = choice
    await query.edit_message_text(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ –ü–û –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç Outlook' –∏–ª–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Microsoft Office'):"
    )
    context.user_data['current_state'] = SUMMARY
    return SUMMARY

async def hw_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    choice = query.data

    context.user_data['type'] = choice
    await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä' –∏–ª–∏ '–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä'):")
    context.user_data['current_state'] = SUMMARY
    return SUMMARY

async def summary_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['summary'] = update.message.text
    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data='send_no_photo'),
            InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='attach_photo')
        ],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit_description')]
    ]
    await update.message.reply_text(
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n–¢–∏–ø: {context.user_data['type']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {context.user_data['summary']}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM

async def photo_upload_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    photo_file = await update.message.photo[-1].get_file()
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    file_ext = os.path.splitext(photo_file.file_path)[1]
    file_name = f'{user_id}_{timestamp}{file_ext}'
    file_path = os.path.join(PHOTO_DIR, file_name)

    await photo_file.download_to_drive(file_path)

    if 'photos' not in context.user_data:
        context.user_data['photos'] = []
    context.user_data['photos'].append(file_path)

    keyboard = [
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='confirm')],
        [InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ", callback_data='next_photo')]
    ]
    await update.message.reply_text(
        "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PHOTO_UPLOAD

async def confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data = context.user_data
    fio, location, email = get_user_data_from_db(user_id)

    subject = f"–ó–∞—è–≤–∫–∞ –æ—Ç {fio or query.from_user.username}"
    body = user_data['summary']
    photo_paths = user_data.get('photos')

    try:
        send_support_email(subject, body, photo_paths, fio, location, email, user_id)
        save_dialog_to_db(
            user_id, query.from_user.username, user_data['type'],
            body, photo_paths, 'sent'
        )
        await query.edit_message_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!")
        await query.edit_message_reply_markup(get_restart_menu())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    context.user_data.clear()
    return ConversationHandler.END

async def edit_description_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    return SUMMARY

async def send_without_photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # This is essentially the same as confirm_callback but without photos
    context.user_data['photos'] = []
    return await confirm_callback(update, context)

async def next_photo_upload_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.")
    return PHOTO_UPLOAD

async def attach_photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ.")
    return PHOTO_UPLOAD

async def back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    current_state = context.user_data.get('current_state')

    if current_state in [SW_SUBMENU, HW_SUBMENU]:
        await query.edit_message_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–ù–°-–†–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
            reply_markup=get_main_menu()
        )
        context.user_data['current_state'] = SELECT_TYPE
        return SELECT_TYPE
    # Add more back logic if needed for other states
    
    # Default back action
    await query.edit_message_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–ù–°-–†–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )
    return SELECT_TYPE

async def restart_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–ù–°-–†–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )
    return SELECT_TYPE

async def cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¢–ù–°-–†–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=get_main_menu()
    )
    return SELECT_TYPE 